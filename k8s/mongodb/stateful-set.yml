apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: mongodb
spec:
  serviceName: mongodb
  replicas: 1
  selector:
    matchLabels:
      app: database
  template:
    metadata:
      labels:
        app: database
    spec:
      containers:
      - name: mongodb
        image: mongo:4.0.8
        env:
          - name: MONGO_INITDB_ROOT_USERNAME_FILE
            value: /etc/credentials/admin/MONGO_ROOT_USERNAME
          - name: MONGO_INITDB_ROOT_PASSWORD_FILE
            value: /etc/credentials/admin/MONGO_ROOT_PASSWORD
          - name: MONGODB_USERNAME
              valueFrom:
                secretKeyRef:
                  key: MONGO_USERNAME
                  name: mongodb-secrets
          - name: MONGODB_PASSWORD
              valueFrom:
                secretKeyRef:
                  key: MONGO_PASSWORD
                  name: mongodb-secrets
        volumeMounts:
        - name: credentials
          mountPath: /etc/credentials
          readOnly: true
        - name: mongodb-scripts
          mountPath: /docker-entrypoint-initdb.d
          readOnly: true
        - name: mongodb-configmap
          mountPath: /config
          readOnly: true
        - name: mongo-data
          mountPath: /data/db
      # lifecycle:
        # postStart:
        #   exec:
        #     command:
        #       - /bin/sh
        #       - -cx
        #       - >
        #         if [ ! -f /data/db/admin-user.lock ]; then
        #           echo "KUBERNETES LOG - no Admin-user.lock file found yet"
        #           sleep 20;
        #           touch /data/db/admin-user.lock
        #           echo "KUBERNETES LOG - creating user ${MONGODB_USERNAME} for database named microservices"
        #           mongo --eval "db = db.getSiblingDB('microservices'); db.createUser({ user: '${MONGODB_USERNAME}', pwd: '${MONGODB_PASSWORD}', roles: [{ role: 'dbAdmin,readWrite', db: 'admin' }]});" >> /data/db/config.log
        #           echo "KUBERNETES LOG $HOSTNAME -shutting mongod down for final restart"
        #           mongod --shutdown;
        #         fi;
      nodeSelector:
        kubernetes.io/hostname: minikube
      volumes:
      - name: mongo-data
        persistentVolumeClaim:
          claimName: mongodb
      - name: credentials
        secret:
          secretName: mongodb-secrets
          items:
          - key: MONGO_ROOT_USERNAME
            path: admin/MONGO_ROOT_USERNAME
            mode: 0444
          - key: MONGO_ROOT_PASSWORD
            path: admin/MONGO_ROOT_PASSWORD
            mode: 0444
          - key: MONGO_USERNAME
            path: MONGO_USERNAME
            mode: 0444
          - key: MONGO_PASSWORD
            path: MONGO_PASSWORD
            mode: 0444
          - key: MONGO_USERS_LIST
            path: MONGO_USERS_LIST
            mode: 0444
      - name: mongodb-scripts
        configMap:
          name: mongodb-configmap
          items:
          - key: ensure-users.js
            path: ensure-users.js
      - name: mongodb-configmap
        configMap:
          name: mongodb-configmap
          items:
          - key: mongo.conf
            path: mongo.conf